//design
module aes(
  input [127:0]xin,key,
  output [127:0]xout);
  wire [127:0]xout0,xout1,xout2,xout3,xout4,xout5,xout6,xout7,xout8,xout9;
  wire [127:0]key_1,key_2,key_3,key_4,key_5,key_6,key_7,key_8,key_9;
  zeroth_round r0(xin,key,xout0);
  middle_round mr1(xout0,key,8'h1,key_1,xout1);
  middle_round mr2(xout1,key_1,8'h2,key_2,xout2);
  middle_round mr3(xout2,key_2,8'd3,key_3,xout3);
  middle_round mr4(xout3,key_3,8'd4,key_4,xout4);
  middle_round mr5(xout4,key_4,8'd5,key_5,xout5);
  middle_round mr6(xout5,key_5,8'd6,key_6,xout6);
  middle_round mr7(xout6,key_6,8'd7,key_7,xout7);
  middle_round mr8(xout7,key_7,8'd8,key_8,xout8);
  middle_round mr9(xout8,key_8,8'd9,key_9,xout9);
  last_round mr10(xout9,key_9,xout);
endmodule

//0th round - only add_round_key transformation
module zeroth_round(
  input [127:0]xin,key_in,
  output [127:0]xout);
  wire [127:0]y;
  add_round_key ark(xin,key_in,xout);
endmodule
//1st to 9th rounds
module middle_round(
  input [127:0]xin,key_in,
  input [7:0]round,
  output [127:0]middle_key,
  output [127:0]xout);
  wire [127:0]sub_bytes_state,shift_rows_state,mix_columns_state,add_round_key_state,round_key;
  sub_bytes sb(xin,sub_bytes_state);
  shift_rows sr(sub_bytes_state,shift_rows_state);
  mix_columns mc(shift_rows_state,mix_columns_state);
  key_expansion k(key_in,round,round_key);
  add_round_key ark(mix_columns_state,round_key,xout);
  assign middle_key=round_key;
endmodule
//10th round-where we drop mix-columns tranfromation
module last_round(
  input [127:0]xin,key_in,
  output [127:0]xout);
  wire [127:0]sub_bytes_state,shift_rows_state,mix_columns_state,add_round_key_state,round_key;
  sub_bytes sb(xin,sub_bytes_state);
  shift_rows sr(sub_bytes_state,shift_rows_state);
  key_expansion k(key_in,8'd10,round_key);
  add_round_key ark(shift_rows_state,round_key,xout);
endmodule
//sub bytes with corresponding ones from s_box
module sub_bytes(input [127:0]xin, output  [127:0]xout);
  s_box s0(xin[127:120],xout[127:120]);
  s_box s1(xin[119:112],xout[119:112]);
  s_box s2(xin[111:104],xout[111:104]);
  s_box s3(xin[103:96],xout[103:96]);
  s_box s4(xin[95:88],xout[95:88]);
  s_box s5(xin[87:80],xout[87:80]);
  s_box s6(xin[79:72],xout[79:72]);
  s_box s7(xin[71:64],xout[71:64]);
  s_box s8(xin[63:56],xout[63:56]);
  s_box s9(xin[55:48],xout[55:48]);
  s_box sa(xin[47:40],xout[47:40]);
  s_box sb(xin[39:32],xout[39:32]);
  s_box sc(xin[31:24],xout[31:24]);
  s_box sd(xin[23:16],xout[23:16]);
  s_box se(xin[15:8],xout[15:8]);
  s_box sf(xin[7:0],xout[7:0]);
endmodule
//shift rows of state matrix as per the index of the row towards left , circularly
module shift_rows(input [127:0]x,output reg [127:0]xout);
  integer i,j,k,k1,k2,temp;
  always @(*) begin
    xout={x[127:120],x[87:80],x[47:40],x[7:0],
          x[95:88],x[55:48],x[15:8],x[103:96],
          x[63:56],x[23:16],x[111:104],x[71:64],
          x[31:24],x[119:112],x[79:72],x[39:32]};
  end
endmodule
//multiply state matrix with the state byte matrix
module mix_columns(input [127:0]xin,output [127:0]xout);
  //since matrix contains only 1,2 and 3 numbers.. instantiate multiply module which is designed to perform multiplication with the row [2,3,1,1] and accordingly adjust the order of variables while instantiating
  multiply m00(xin[127:120],xin[119:112],xin[111:104],xin[103:96],xout[127:120]);
  multiply m10(xin[119:112],xin[111:104],xin[103:96],xin[127:120],xout[119:112]);
  multiply m20(xin[111:104],xin[103:96],xin[127:120],xin[119:112],xout[111:104]);
  multiply m30(xin[103:96],xin[127:120],xin[119:112],xin[111:104],xout[103:96]);
  multiply m01(xin[95:88],xin[87:80],xin[79:72],xin[71:64],xout[95:88]);
  multiply m11(xin[87:80],xin[79:72],xin[71:64],xin[95:88],xout[87:80]);
  multiply m21(xin[79:72],xin[71:64],xin[95:88],xin[87:80],xout[79:72]);
  multiply m31(xin[71:64],xin[95:88],xin[87:80],xin[79:72],xout[71:64]);
  multiply m02(xin[63:56],xin[55:48],xin[47:40],xin[39:32],xout[63:56]);
  multiply m12(xin[55:48],xin[47:40],xin[39:32],xin[63:56],xout[55:48]);
  multiply m22(xin[47:40],xin[39:32],xin[63:56],xin[55:48],xout[47:40]);
  multiply m32(xin[39:32],xin[63:56],xin[55:48],xin[47:40],xout[39:32]);
  multiply m03(xin[31:24],xin[23:16],xin[15:8],xin[7:0],xout[31:24]);
  multiply m13(xin[23:16],xin[15:8],xin[7:0],xin[31:24],xout[23:16]);
  multiply m23(xin[15:8],xin[7:0],xin[31:24],xin[23:16],xout[15:8]);
  multiply m33(xin[7:0],xin[31:24],xin[23:16],xin[15:8],xout[7:0]);
endmodule 
//add_round_key transformation- xor of state matrix with round key matrix
module add_round_key(
  input [127:0]xin,round_key,output [127:0]xout);
  assign xout=xin^round_key;
endmodule
//auxiliary fn - which converts w to w1 after doing some operations with g
module auxiliary_fn(
  input [31:0]g,
  input [31:0]w,
  output [31:0]z1);
  wire [7:0]temp;
  wire [31:0]x1,y1;
  //byte wise circular left shift 
  assign x1={w[23:16],w[15:8],w[7:0],w[31:24]};
  //s_box substitution
  s_box b1(x1[31:24],y1[31:24]);
  s_box b2(x1[23:16],y1[23:16]);
  s_box b3(x1[15:8],y1[15:8]);
  s_box b4(x1[7:0],y1[7:0]);
  //xor of y1 and g
  assign z1=y1^g;
endmodule
//takes main key which we gave in the begining as input and produces 10 keys 
module key_expansion(
  input [127:0]key_in,
  input [7:0]round,
  output [127:0]key_out);
  wire [31:0]g;
  wire [7:0]g1;
  wire [31:0]w0,w1,w2,w3,z1;
  wire [31:0]w4,w5,w6,w7;
  //dividing key into words
  assign {w0,w1,w2,w3}={key_in[127:96],key_in[95:64],key_in[63:32],key_in[31:0]};
  //generating g
  gen_g gen_g1(round,g1);
  assign g={g1,24'h0};
  //calling auxiliary fn
  auxiliary_fn af1(g,w3,z1);
  //generating new key
  assign
    w4=w0^z1,
    w5=w1^w4,
    w6=w2^w5,
    w7=w3^w6; 
  assign key_out={w4,w5,w6,w7};
endmodule
//multiply- designed to multiply any column of state matrix with row [2,3,1,1]
module multiply(
  input [7:0]x1,x2,x3,x4,
  output reg [7:0]y);
  always @(*) begin
    //if 2*x takes 9 bits then xor those 8 bit value with 8'h1b 
    if ((2*x1>=9'd256&&2*x2<=9'd256)||(2*x1<=9'd256&&2*x2>=9'd256)) begin
      y=(2*x1)^(2*x2)^x2^x3^x4^8'h1b;
    end
    else
      begin
       y=(2*x1)^(2*x2)^x2^x3^x4;
    end
  end
endmodule
//generate g values which are basically of the form (2^(round))base10
module gen_g(
  input [7:0]round,
  output [7:0]g);
  assign g=(round==8'd0)?0:
    (round==8'd1)?8'h01:
    (round==8'd2)?8'h02:
    (round==8'd03)?8'h4:
    (round==8'd04)?8'h8:
    (round==8'd05)?8'h10:
    (round==8'd06)?8'h20:
    (round==8'd07)?8'h40:
    (round==8'd08)?8'h80:
    (round==8'd09)?8'h1b:8'h36;
endmodule
//s-box
module s_box(
  input [7:0]xin,
  output reg [7:0]sb);
  always @(*) begin
    case(xin)
      8'h00: sb=8'h63;
      8'h01: sb=8'h7c;
	   8'h02: sb=8'h77;
	   8'h03: sb=8'h7b;
	   8'h04: sb=8'hf2;
	   8'h05: sb=8'h6b;
	   8'h06: sb=8'h6f;
	   8'h07: sb=8'hc5;
	   8'h08: sb=8'h30;
	   8'h09: sb=8'h01;
	   8'h0a: sb=8'h67;
	   8'h0b: sb=8'h2b;
	   8'h0c: sb=8'hfe;
	   8'h0d: sb=8'hd7;
	   8'h0e: sb=8'hab;
	   8'h0f: sb=8'h76;
	   8'h10: sb=8'hca;
	   8'h11: sb=8'h82;
	   8'h12: sb=8'hc9;
	   8'h13: sb=8'h7d;
	   8'h14: sb=8'hfa;
	   8'h15: sb=8'h59;
	   8'h16: sb=8'h47;
	   8'h17: sb=8'hf0;
	   8'h18: sb=8'had;
	   8'h19: sb=8'hd4;
	   8'h1a: sb=8'ha2;
	   8'h1b: sb=8'haf;
	   8'h1c: sb=8'h9c;
	   8'h1d: sb=8'ha4;
	   8'h1e: sb=8'h72;
	   8'h1f: sb=8'hc0;
	   8'h20: sb=8'hb7;
	   8'h21: sb=8'hfd;
	   8'h22: sb=8'h93;
	   8'h23: sb=8'h26;
	   8'h24: sb=8'h36;
	   8'h25: sb=8'h3f;
	   8'h26: sb=8'hf7;
	   8'h27: sb=8'hcc;
	   8'h28: sb=8'h34;
	   8'h29: sb=8'ha5;
	   8'h2a: sb=8'he5;
	   8'h2b: sb=8'hf1;
	   8'h2c: sb=8'h71;
	   8'h2d: sb=8'hd8;
	   8'h2e: sb=8'h31;
	   8'h2f: sb=8'h15;
	   8'h30: sb=8'h04;
	   8'h31: sb=8'hc7;
	   8'h32: sb=8'h23;
	   8'h33: sb=8'hc3;
	   8'h34: sb=8'h18;
	   8'h35: sb=8'h96;
	   8'h36: sb=8'h05;
	   8'h37: sb=8'h9a;
	   8'h38: sb=8'h07;
	   8'h39: sb=8'h12;
	   8'h3a: sb=8'h80;
	   8'h3b: sb=8'he2;
	   8'h3c: sb=8'heb;
	   8'h3d: sb=8'h27;
	   8'h3e: sb=8'hb2;
	   8'h3f: sb=8'h75;
	   8'h40: sb=8'h09;
	   8'h41: sb=8'h83;
	   8'h42: sb=8'h2c;
	   8'h43: sb=8'h1a;
	   8'h44: sb=8'h1b;
	   8'h45: sb=8'h6e;
	   8'h46: sb=8'h5a;
	   8'h47: sb=8'ha0;
	   8'h48: sb=8'h52;
	   8'h49: sb=8'h3b;
	   8'h4a: sb=8'hd6;
	   8'h4b: sb=8'hb3;
	   8'h4c: sb=8'h29;
	   8'h4d: sb=8'he3;
	   8'h4e: sb=8'h2f;
	   8'h4f: sb=8'h84;
	   8'h50: sb=8'h53;
	   8'h51: sb=8'hd1;
	   8'h52: sb=8'h00;
	   8'h53: sb=8'hed;
	   8'h54: sb=8'h20;
	   8'h55: sb=8'hfc;
	   8'h56: sb=8'hb1;
	   8'h57: sb=8'h5b;
	   8'h58: sb=8'h6a;
	   8'h59: sb=8'hcb;
	   8'h5a: sb=8'hbe;
	   8'h5b: sb=8'h39;
	   8'h5c: sb=8'h4a;
	   8'h5d: sb=8'h4c;
	   8'h5e: sb=8'h58;
	   8'h5f: sb=8'hcf;
	   8'h60: sb=8'hd0;
	   8'h61: sb=8'hef;
	   8'h62: sb=8'haa;
	   8'h63: sb=8'hfb;
	   8'h64: sb=8'h43;
	   8'h65: sb=8'h4d;
	   8'h66: sb=8'h33;
	   8'h67: sb=8'h85;
	   8'h68: sb=8'h45;
	   8'h69: sb=8'hf9;
	   8'h6a: sb=8'h02;
	   8'h6b: sb=8'h7f;
	   8'h6c: sb=8'h50;
	   8'h6d: sb=8'h3c;
	   8'h6e: sb=8'h9f;
	   8'h6f: sb=8'ha8;
	   8'h70: sb=8'h51;
	   8'h71: sb=8'ha3;
	   8'h72: sb=8'h40;
	   8'h73: sb=8'h8f;
	   8'h74: sb=8'h92;
	   8'h75: sb=8'h9d;
	   8'h76: sb=8'h38;
	   8'h77: sb=8'hf5;
	   8'h78: sb=8'hbc;
	   8'h79: sb=8'hb6;
	   8'h7a: sb=8'hda;
	   8'h7b: sb=8'h21;
	   8'h7c: sb=8'h10;
	   8'h7d: sb=8'hff;
	   8'h7e: sb=8'hf3;
	   8'h7f: sb=8'hd2;
	   8'h80: sb=8'hcd;
	   8'h81: sb=8'h0c;
	   8'h82: sb=8'h13;
	   8'h83: sb=8'hec;
	   8'h84: sb=8'h5f;
	   8'h85: sb=8'h97;
	   8'h86: sb=8'h44;
	   8'h87: sb=8'h17;
	   8'h88: sb=8'hc4;
	   8'h89: sb=8'ha7;
	   8'h8a: sb=8'h7e;
	   8'h8b: sb=8'h3d;
	   8'h8c: sb=8'h64;
	   8'h8d: sb=8'h5d;
	   8'h8e: sb=8'h19;
	   8'h8f: sb=8'h73;
	   8'h90: sb=8'h60;
	   8'h91: sb=8'h81;
	   8'h92: sb=8'h4f;
	   8'h93: sb=8'hdc;
	   8'h94: sb=8'h22;
	   8'h95: sb=8'h2a;
	   8'h96: sb=8'h90;
	   8'h97: sb=8'h88;
	   8'h98: sb=8'h46;
	   8'h99: sb=8'hee;
	   8'h9a: sb=8'hb8;
	   8'h9b: sb=8'h14;
	   8'h9c: sb=8'hde;
	   8'h9d: sb=8'h5e;
	   8'h9e: sb=8'h0b;
	   8'h9f: sb=8'hdb;
	   8'ha0: sb=8'he0;
	   8'ha1: sb=8'h32;
	   8'ha2: sb=8'h3a;
	   8'ha3: sb=8'h0a;
	   8'ha4: sb=8'h49;
	   8'ha5: sb=8'h06;
	   8'ha6: sb=8'h24;
	   8'ha7: sb=8'h5c;
	   8'ha8: sb=8'hc2;
	   8'ha9: sb=8'hd3;
	   8'haa: sb=8'hac;
	   8'hab: sb=8'h62;
	   8'hac: sb=8'h91;
	   8'had: sb=8'h95;
	   8'hae: sb=8'he4;
	   8'haf: sb=8'h79;
	   8'hb0: sb=8'he7;
	   8'hb1: sb=8'hc8;
	   8'hb2: sb=8'h37;
	   8'hb3: sb=8'h6d;
	   8'hb4: sb=8'h8d;
	   8'hb5: sb=8'hd5;
	   8'hb6: sb=8'h4e;
	   8'hb7: sb=8'ha9;
	   8'hb8: sb=8'h6c;
	   8'hb9: sb=8'h56;
	   8'hba: sb=8'hf4;
	   8'hbb: sb=8'hea;
	   8'hbc: sb=8'h65;
	   8'hbd: sb=8'h7a;
	   8'hbe: sb=8'hae;
	   8'hbf: sb=8'h08;
	   8'hc0: sb=8'hba;
	   8'hc1: sb=8'h78;
	   8'hc2: sb=8'h25;
	   8'hc3: sb=8'h2e;
	   8'hc4: sb=8'h1c;
	   8'hc5: sb=8'ha6;
	   8'hc6: sb=8'hb4;
	   8'hc7: sb=8'hc6;
	   8'hc8: sb=8'he8;
	   8'hc9: sb=8'hdd;
	   8'hca: sb=8'h74;
	   8'hcb: sb=8'h1f;
	   8'hcc: sb=8'h4b;
	   8'hcd: sb=8'hbd;
	   8'hce: sb=8'h8b;
	   8'hcf: sb=8'h8a;
	   8'hd0: sb=8'h70;
	   8'hd1: sb=8'h3e;
	   8'hd2: sb=8'hb5;
	   8'hd3: sb=8'h66;
	   8'hd4: sb=8'h48;
	   8'hd5: sb=8'h03;
	   8'hd6: sb=8'hf6;
	   8'hd7: sb=8'h0e;
	   8'hd8: sb=8'h61;
	   8'hd9: sb=8'h35;
	   8'hda: sb=8'h57;
	   8'hdb: sb=8'hb9;
	   8'hdc: sb=8'h86;
	   8'hdd: sb=8'hc1;
	   8'hde: sb=8'h1d;
	   8'hdf: sb=8'h9e;
	   8'he0: sb=8'he1;
	   8'he1: sb=8'hf8;
	   8'he2: sb=8'h98;
	   8'he3: sb=8'h11;
	   8'he4: sb=8'h69;
	   8'he5: sb=8'hd9;
	   8'he6: sb=8'h8e;
	   8'he7: sb=8'h94;
	   8'he8: sb=8'h9b;
	   8'he9: sb=8'h1e;
	   8'hea: sb=8'h87;
	   8'heb: sb=8'he9;
	   8'hec: sb=8'hce;
	   8'hed: sb=8'h55;
	   8'hee: sb=8'h28;
	   8'hef: sb=8'hdf;
	   8'hf0: sb=8'h8c;
	   8'hf1: sb=8'ha1;
	   8'hf2: sb=8'h89;
	   8'hf3: sb=8'h0d;
	   8'hf4: sb=8'hbf;
	   8'hf5: sb=8'he6;
	   8'hf6: sb=8'h42;
	   8'hf7: sb=8'h68;
	   8'hf8: sb=8'h41;
	   8'hf9: sb=8'h99;
	   8'hfa: sb=8'h2d;
	   8'hfb: sb=8'h0f;
	   8'hfc: sb=8'hb0;
	   8'hfd: sb=8'h54;
	   8'hfe: sb=8'hbb;
	   8'hff: sb=8'h16;
    endcase
  end    
endmodule

//testbench
module test;
  reg [7:0]round;
  reg [127:0]x,key;
  wire [127:0]y;
  aes aes1(x,key,y);
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,x,y);
  end
  initial fork
  x={8'h00,8'h11,8'h22,8'h33,
       8'h44,8'h55,8'h66,8'h77,
       8'h88,8'h99,8'haa,8'hbb,
       8'hcc,8'hdd,8'hee,8'hff};
    key={8'h00,8'h1,8'h2,8'h3,
         8'h4,8'h5,8'h6,8'h7,
         8'h8,8'h9,8'ha,8'hb,
         8'hc,8'hd,8'he,8'hf};
    $monitor("%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h\n",
             y[127:120],y[95:88],y[63:56],y[31:24],
             y[119:112],y[87:80],y[55:48],y[23:16],
             y[111:104],y[79:72],y[47:40],y[15:8],
             y[103:96],y[71:64],y[39:32],y[7:0]);   
   #5 key={8'h6d,8'h79,8'h73,8'h65,
         8'h63,8'h72,8'h65,8'h74,
         8'h70,8'h61,8'h73,8'h73,
         8'h77,8'h6f,8'h72,8'h64};
    x={8'h53 ,8'h65 ,8'h63 ,8'h72,
       8'h65 ,8'h74 ,8'h20 ,8'h4d,
       8'h65 ,8'h73 ,8'h73 ,8'h61,
       8'h67 ,8'h65 ,8'h20 ,8'h41};
    $monitor("%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h",
             y[127:120],y[95:88],y[63:56],y[31:24],
             y[119:112],y[87:80],y[55:48],y[23:16],
             y[111:104],y[79:72],y[47:40],y[15:8],
             y[103:96],y[71:64],y[39:32],y[7:0]);
  join 
endmodule
//some testcases
//key1-123456789abcdef
//input1-00112233445566778899aabbccddeeff
//output1-69 C4 E0 D8 6A 7B 04 30 D8 CD B7 80 70 B4 C5 5A
//key2-6d 79 73 65 63 72 65 74 70 61 73 73 77 6f 72 64
//input2-53 65 63 72 65 74 20 4d 65 73 73 61 67 65 20 41
//output2-e8 da 47 ac c0 8b c7 51 74 5e f8 fb ff 44 e1 07 
