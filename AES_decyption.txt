//design
module AES_decryption(
  input [127:0]cypher_text,key,
  output [127:0]plain_text);
  wire [127:0]xout_10,xout_9,xout_8,xout_7,xout_6,xout_5,xout_4,xout_3,xout_2,xout_1;
  zeroth_round r10(cypher_text,key,xout_10);
  middle_round r9(xout_10,key,8'd9,xout_9);
  middle_round r8(xout_9,key,8'd8,xout_8);
  middle_round r7(xout_8,key,8'd7,xout_7);
  middle_round r6(xout_7,key,8'd6,xout_6);
  middle_round r5(xout_6,key,8'd5,xout_5);
  middle_round r4(xout_5,key,8'd4,xout_4);
  middle_round r3(xout_4,key,8'd3,xout_3);
  middle_round r2(xout_3,key,8'd2,xout_2);
  middle_round r1(xout_2,key,8'd1,xout_1);
  last_round r0(xout_1,key,plain_text);
endmodule
//zeroth_round- only add round key transformation
module zeroth_round(
  input [127:0]xin,key,
  output [127:0]xout);
  wire [127:0]round_key;
  key_expansion key10(key,8'd10,round_key);
  add_round_key ark(xin,round_key,xout);
endmodule
//middle round- other than zeroth and last rounds.. where all 4 transformations are done
module middle_round(
  input [127:0]xin,key,
  input [7:0]round,
  output [127:0]xout);
  wire [127:0]inv_shift_rows_state,inv_sub_bytes_state,add_round_key_state,round_key;
  key_expansion keyn(key,round,round_key);
  inv_shift_rows isr(xin,inv_shift_rows_state);
  inv_sub_bytes isb(inv_shift_rows_state,inv_sub_bytes_state);
  add_round_key ark(inv_sub_bytes_state,round_key,add_round_key_state);
  inv_mix_columns imc(add_round_key_state,xout);
endmodule
//last_round- where we skip inv mix column tranformation
module last_round(
  input [127:0]xin,key,
  output [127:0]xout);
  wire [127:0]inv_shift_rows_state,inv_sub_bytes_state,add_round_key_state;
  inv_shift_rows isr(xin,inv_shift_rows_state);
  inv_sub_bytes isb(inv_shift_rows_state,inv_sub_bytes_state);
  add_round_key ark(inv_sub_bytes_state,key,xout);
endmodule
//inv_shift_rows- opposite to shift rows tranformatio i.e., shift each row towards right according to their row index
module inv_shift_rows(input [127:0]x,output reg [127:0]xout);
  always @(*) begin
    xout={x[127:120],x[23:16],x[47:40],x[71:64],
          x[95:88],x[119:112],x[15:8],x[39:32],
          x[63:56],x[87:80],x[111:104],x[7:0],
          x[31:24],x[55:48],x[79:72],x[103:96]};
  end
endmodule
//inv_sub_bytes-opposite to sub_bytes.
module inv_sub_bytes(
  input [127:0]xin,
  output [127:0]xout);
  wire [7:0]x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_a,x_b,x_c,x_d,x_e,x_f;
  wire [7:0]y_0,y_1,y_2,y_3,y_4,y_5,y_6,y_7,y_8,y_9,y_a,y_b,y_c,y_d,y_e,y_f;
  assign {x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_a,x_b,x_c,x_d,x_e,x_f}=xin;
  inv_s_box s0(x_0,y_0);
  inv_s_box s1(x_1,y_1);
  inv_s_box s2(x_2,y_2);
  inv_s_box s3(x_3,y_3);
  inv_s_box s4(x_4,y_4);
  inv_s_box s5(x_5,y_5);
  inv_s_box s6(x_6,y_6);
  inv_s_box s7(x_7,y_7);
  inv_s_box s8(x_8,y_8);
  inv_s_box s9(x_9,y_9);
  inv_s_box sa(x_a,y_a);
  inv_s_box sb(x_b,y_b);
  inv_s_box sc(x_c,y_c);
  inv_s_box sd(x_d,y_d);
  inv_s_box se(x_e,y_e);
  inv_s_box sf(x_f,y_f);
  
  assign xout={y_0,y_1,y_2,y_3,y_4,y_5,y_6,y_7,y_8,y_9,y_a,y_b,y_c,y_d,y_e,y_f};
endmodule
//inv_mix_columns- here the state matrix is 
/*14 11 13 09   e b d 9
  09 14 11 13   9 e b d
  13 09 14 11   d 9 e b
  11 13 09 14   b d 9 e
  */
module inv_mix_columns(
  input [127:0]xin,
  output [127:0]xout);
  wire [7:0]x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_a,x_b,x_c,x_d,x_e,x_f,x_g;
  wire [7:0]y_1,y_2,y_3,y_4,y_5,y_6,y_7,y_8,y_9,y_a,y_b,y_c,y_d,y_e,y_f,y_g;
  assign {x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_a,x_b,x_c,x_d,x_e,x_f,x_g}=xin;
  mul m00(x_1,x_2,x_3,x_4,y_1);
  mul m10(x_2,x_3,x_4,x_1,y_2);
  mul m20(x_3,x_4,x_1,x_2,y_3);
  mul m30(x_4,x_1,x_2,x_3,y_4);
  mul m10a(x_5,x_6,x_7,x_8,y_5);
  mul m11(x_6,x_7,x_8,x_5,y_6);
  mul m12(x_7,x_8,x_5,x_6,y_7);
  mul m13(x_8,x_5,x_6,x_7,y_8);
  mul m20a(x_9,x_a,x_b,x_c,y_9);
  mul m21(x_a,x_b,x_c,x_9,y_a);
  mul m22(x_b,x_c,x_9,x_a,y_b);
  mul m23(x_c,x_9,x_a,x_b,y_c);
  mul m30a(x_d,x_e,x_f,x_g,y_d);
  mul m31(x_e,x_f,x_g,x_d,y_e);
  mul m32(x_f,x_g,x_d,x_e,y_f);
  mul m33(x_g,x_d,x_e,x_f,y_g);
  assign xout={y_1,y_2,y_3,y_4,y_5,y_6,y_7,y_8,y_9,y_a,y_b,y_c,y_d,y_e,y_f,y_g};
endmodule
module add_round_key(
  input [127:0]xin,round_key,output [127:0]xout);
  assign xout=xin^round_key;
endmodule
//key_expansion- generate all the 10 keys
module key_expansion(
  input [127:0]key_in,
  input [7:0]round,
  output [127:0]key_out);
  wire [127:0]key_1,key_2,key_3,key_4,key_5,key_6,key_7,key_8,key_9,key_10;
  key_expansion1 k1(key_in,8'd01,key_1);
  key_expansion1 k2(key_1,8'd02,key_2);
  key_expansion1 k3(key_2,8'd03,key_3);
  key_expansion1 k4(key_3,8'd04,key_4);
  key_expansion1 k5(key_4,8'd05,key_5);
  key_expansion1 k6(key_5,8'd06,key_6);
  key_expansion1 k7(key_6,8'd07,key_7);
  key_expansion1 k8(key_7,8'd08,key_8);
  key_expansion1 k9(key_8,8'd09,key_9);
  key_expansion1 k10(key_9,8'd010,key_10);
  assign key_out=
    (round==8'd1)?key_1:
    (round==8'd2)?key_2:
    (round==8'd3)?key_3:
    (round==8'd4)?key_4:
    (round==8'd5)?key_5:
    (round==8'd6)?key_6:
    (round==8'd7)?key_7:
    (round==8'd8)?key_8:
    (round==8'd9)?key_9:key_10;
endmodule
module auxiliary_fn(
  input [31:0]g,
  input [31:0]w,
  output [31:0]z1);
  wire [7:0]temp;
  wire [31:0]x1,y1;
  //byte wise circular left shift 
  assign x1={w[23:16],w[15:8],w[7:0],w[31:24]};
  //s_box substitution
  s_box b1(x1[31:24],y1[31:24]);
  s_box b2(x1[23:16],y1[23:16]);
  s_box b3(x1[15:8],y1[15:8]);
  s_box b4(x1[7:0],y1[7:0]);
  //xor of y1 and g
  assign z1=y1^g;
endmodule
//takes main key which we gave in the begining as input and produces 10 keys 
module key_expansion1(
  input [127:0]key_in,
  input [7:0]round,
  output [127:0]key_out);
  wire [31:0]g;
  wire [7:0]g1;
  wire [31:0]w0,w1,w2,w3,z1;
  wire [31:0]w4,w5,w6,w7;
  //dividing key into words
  assign {w0,w1,w2,w3}={key_in[127:96],key_in[95:64],key_in[63:32],key_in[31:0]};
  //generating g
  gen_g gen_g1(round,g1);
  assign g={g1,24'h0};
  //calling auxiliary fn
  auxiliary_fn af1(g,w3,z1);
  //generating new key
  assign
    w4=w0^z1,
    w5=w1^w4,
    w6=w2^w5,
    w7=w3^w6; 
  assign key_out={w4,w5,w6,w7};
endmodule
module gen_g(
  input [7:0]round,
  output [7:0]g);
  assign g=(round==8'd0)?0:
    (round==8'd1)?8'h01:
    (round==8'd2)?8'h02:
    (round==8'd03)?8'h4:
    (round==8'd04)?8'h8:
    (round==8'd05)?8'h10:
    (round==8'd06)?8'h20:
    (round==8'd07)?8'h40:
    (round==8'd08)?8'h80:
    (round==8'd09)?8'h1b:8'h36;
endmodule
//x^8=x^4+x^3+x^1+1
module x8(
  input [7:0]x,
  output reg [7:0]y);
  always @(*) begin
    if(2*x>=9'd256) begin
      y=(2*x)^8'h1b;
    end
    else
      y=2*x;
  end
endmodule
//11=1+2+8
module mul_with_11(
  input [7:0]x1,
  output [7:0]y);
  wire [7:0]t1,t2,t3;
  x8 x_mul_2(x1,t1);
  x8 x_mul_4(t1,t2);
  x8 x_mul_8(t2,t3);
  assign y=x1^t1^t3;
endmodule
//13=1+4+8
module mul_with_13(
  input [7:0]x1,
  output [7:0]y);
  wire [7:0]t1,t2,t3;
  x8 x_mul_2(x1,t1);
  x8 x_mul_4(t1,t2);
  x8 x_mul_8(t2,t3);
  assign y=x1^t2^t3;
endmodule
//14=2+4+8
module mul_with_14(
  input [7:0]x1,
  output [7:0]y);
  wire [7:0]t1,t2,t3;
  x8 x_mul_2(x1,t1);
  x8 x_mul_4(t1,t2);
  x8 x_mul_8(t2,t3);
  assign y=t1^t2^t3;
endmodule
//9=1+8
module mul_with_9(
  input [7:0]x1,
  output [7:0]y);
  wire [7:0]t1,t2,t3;
  x8 x_mul_2(x1,t1);
  x8 x_mul_4(t1,t2);
  x8 x_mul_8(t2,t3);
  assign y=x1^t3;
endmodule
//multiply-multiplies any column with row-[14,11,13,09]
module mul(
  input [7:0]x1,x2,x3,x4,
  output [7:0]y);
  wire [7:0]y1,y2,y3,y4;
  mul_with_14 m4(x1,y1);
  mul_with_11 m3(x2,y2);
  mul_with_13 m11(x3,y3);
  mul_with_9 m17(x4,y4);
  assign y=(y1)^y2^(y3)^y4;
endmodule
//inverse_s_box- to retrieve the matrix that has gone through sub_bytes_Transformatio
module inv_s_box(
  input [7:0]xin,
  output reg [7:0]xout);
  always @(*) begin
    case(xin)
8'h63:	xout=8'h00;
8'h7C:	xout=8'h01;
8'h77:	xout=8'h02;
8'h7B:	xout=8'h03;
8'hF2:	xout=8'h04;
8'h6B:	xout=8'h05;
8'h6F:	xout=8'h06;
8'hC5:	xout=8'h07;
8'h30:	xout=8'h08;
8'h01:	xout=8'h09;
8'h67:	xout=8'h0a;
8'h2B:	xout=8'h0b;
8'hFE:	xout=8'h0c;
8'hD7:	xout=8'h0d;
8'hAB:	xout=8'h0e;
8'h76:	xout=8'h0f;
8'hCA:	xout=8'h10;
8'h82:	xout=8'h11;
8'hC9:	xout=8'h12;
8'h7D:	xout=8'h13;
8'hFA:	xout=8'h14;
8'h59:	xout=8'h15;
8'h47:	xout=8'h16;
8'hF0:	xout=8'h17;
8'hAD:	xout=8'h18;
8'hD4:	xout=8'h19;
8'hA2:	xout=8'h1a;
8'hAF:	xout=8'h1b;
8'h9C:	xout=8'h1c;
8'hA4:	xout=8'h1d;
8'h72:	xout=8'h1e;
8'hC0:	xout=8'h1f;
8'hB7:	xout=8'h20;
8'hFD:	xout=8'h21;
8'h93:	xout=8'h22;
8'h26:	xout=8'h23;
8'h36:	xout=8'h24;
8'h3F:	xout=8'h25;
8'hF7:	xout=8'h26;
8'hCC:	xout=8'h27;
8'h34:	xout=8'h28;
8'hA5:	xout=8'h29;
8'hE5:	xout=8'h2a;
8'hF1:	xout=8'h2b;
8'h71:	xout=8'h2c;
8'hD8:	xout=8'h2d;
8'h31:	xout=8'h2e;
8'h15:	xout=8'h2f;
8'h04:	xout=8'h30;
8'hC7:	xout=8'h31;
8'h23:	xout=8'h32;
8'hC3:	xout=8'h33;
8'h18:	xout=8'h34;
8'h96:	xout=8'h35;
8'h05:	xout=8'h36;
8'h9A:	xout=8'h37;
8'h07:	xout=8'h38;
8'h12:	xout=8'h39;
8'h80:	xout=8'h3a;
8'hE2:	xout=8'h3b;
8'hEB:	xout=8'h3c;
8'h27:	xout=8'h3d;
8'hB2:	xout=8'h3e;
8'h75:	xout=8'h3f;
8'h09:	xout=8'h40;
8'h83:	xout=8'h41;
8'h2C:	xout=8'h42;
8'h1A:	xout=8'h43;
8'h1B:	xout=8'h44;
8'h6E:	xout=8'h45;
8'h5A:	xout=8'h46;
8'hA0:	xout=8'h47;
8'h52:	xout=8'h48;
8'h3B:	xout=8'h49;
8'hD6:	xout=8'h4a;
8'hB3:	xout=8'h4b;
8'h29:	xout=8'h4c;
8'hE3:	xout=8'h4d;
8'h2F:	xout=8'h4e;
8'h84:	xout=8'h4f;
8'h53:	xout=8'h50;
8'hD1:	xout=8'h51;
8'h00:	xout=8'h52;
8'hED:	xout=8'h53;
8'h20:	xout=8'h54;
8'hFC:	xout=8'h55;
8'hB1:	xout=8'h56;
8'h5B:	xout=8'h57;
8'h6A:	xout=8'h58;
8'hCB:	xout=8'h59;
8'hBE:	xout=8'h5a;
8'h39:	xout=8'h5b;
8'h4A:	xout=8'h5c;
8'h4C:	xout=8'h5d;
8'h58:	xout=8'h5e;
8'hCF:	xout=8'h5f;
8'hD0:	xout=8'h60;
8'hEF:	xout=8'h61;
8'hAA:	xout=8'h62;
8'hFB:	xout=8'h63;
8'h43:	xout=8'h64;
8'h4D:	xout=8'h65;
8'h33:	xout=8'h66;
8'h85:	xout=8'h67;
8'h45:	xout=8'h68;
8'hF9:	xout=8'h69;
8'h02:	xout=8'h6a;
8'h7F:	xout=8'h6b;
8'h50:	xout=8'h6c;
8'h3C:	xout=8'h6d;
8'h9F:	xout=8'h6e;
8'hA8:	xout=8'h6f;
8'h51:	xout=8'h70;
8'hA3:	xout=8'h71;
8'h40:	xout=8'h72;
8'h8F:	xout=8'h73;
8'h92:	xout=8'h74;
8'h9D:	xout=8'h75;
8'h38:	xout=8'h76;
8'hF5:	xout=8'h77;
8'hBC:	xout=8'h78;
8'hB6:	xout=8'h79;
8'hDA:	xout=8'h7a;
8'h21:	xout=8'h7b;
8'h10:	xout=8'h7c;
8'hFF:	xout=8'h7d;
8'hF3:	xout=8'h7e;
8'hD2:	xout=8'h7f;
8'hCD:	xout=8'h80;
8'h0C:	xout=8'h81;
8'h13:	xout=8'h82;
8'hEC:	xout=8'h83;
8'h5F:	xout=8'h84;
8'h97:	xout=8'h85;
8'h44:	xout=8'h86;
8'h17:	xout=8'h87;
8'hC4:	xout=8'h88;
8'hA7:	xout=8'h89;
8'h7E:	xout=8'h8a;
8'h3D:	xout=8'h8b;
8'h64:	xout=8'h8c;
8'h5D:	xout=8'h8d;
8'h19:	xout=8'h8e;
8'h73:	xout=8'h8f;
8'h60:	xout=8'h90;
8'h81:	xout=8'h91;
8'h4F:	xout=8'h92;
8'hDC:	xout=8'h93;
8'h22:	xout=8'h94;
8'h2A:	xout=8'h95;
8'h90:	xout=8'h96;
8'h88:	xout=8'h97;
8'h46:	xout=8'h98;
8'hEE:	xout=8'h99;
8'hB8:	xout=8'h9a;
8'h14:	xout=8'h9b;
8'hDE:	xout=8'h9c;
8'h5E:	xout=8'h9d;
8'h0B:	xout=8'h9e;
8'hDB:	xout=8'h9f;
8'hE0:	xout=8'ha0;
8'h32:	xout=8'ha1;
8'h3A:	xout=8'ha2;
8'h0A:	xout=8'ha3;
8'h49:	xout=8'ha4;
8'h06:	xout=8'ha5;
8'h24:	xout=8'ha6;
8'h5C:	xout=8'ha7;
8'hC2:	xout=8'ha8;
8'hD3:	xout=8'ha9;
8'hAC:	xout=8'haa;
8'h62:	xout=8'hab;
8'h91:	xout=8'hac;
8'h95:	xout=8'had;
8'hE4:	xout=8'hae;
8'h79:	xout=8'haf;
8'hE7:	xout=8'hb0;
8'hC8:	xout=8'hb1;
8'h37:	xout=8'hb2;
8'h6D:	xout=8'hb3;
8'h8D:	xout=8'hb4;
8'hD5:	xout=8'hb5;
8'h4E:	xout=8'hb6;
8'hA9:	xout=8'hb7;
8'h6C:	xout=8'hb8;
8'h56:	xout=8'hb9;
8'hF4:	xout=8'hba;
8'hEA:	xout=8'hbb;
8'h65:	xout=8'hbc;
8'h7A:	xout=8'hbd;
8'hAE:	xout=8'hbe;
8'h08:	xout=8'hbf;
8'hBA:	xout=8'hc0;
8'h78:	xout=8'hc1;
8'h25:	xout=8'hc2;
8'h2E:	xout=8'hc3;
8'h1C:	xout=8'hc4;
8'hA6:	xout=8'hc5;
8'hB4:	xout=8'hc6;
8'hC6:	xout=8'hc7;
8'hE8:	xout=8'hc8;
8'hDD:	xout=8'hc9;
8'h74:	xout=8'hca;
8'h1F:	xout=8'hcb;
8'h4B:	xout=8'hcc;
8'hBD:	xout=8'hcd;
8'h8B:	xout=8'hce;
8'h8A:	xout=8'hcf;
8'h70:	xout=8'hd0;
8'h3E:	xout=8'hd1;
8'hB5:	xout=8'hd2;
8'h66:	xout=8'hd3;
8'h48:	xout=8'hd4;
8'h03:	xout=8'hd5;
8'hF6:	xout=8'hd6;
8'h0E:	xout=8'hd7;
8'h61:	xout=8'hd8;
8'h35:	xout=8'hd9;
8'h57:	xout=8'hda;
8'hB9:	xout=8'hdb;
8'h86:	xout=8'hdc;
8'hC1:	xout=8'hdd;
8'h1D:	xout=8'hde;
8'h9E:	xout=8'hdf;
8'hE1:	xout=8'he0;
8'hF8:	xout=8'he1;
8'h98:	xout=8'he2;
8'h11:	xout=8'he3;
8'h69:	xout=8'he4;
8'hD9:	xout=8'he5;
8'h8E:	xout=8'he6;
8'h94:	xout=8'he7;
8'h9B:	xout=8'he8;
8'h1E:	xout=8'he9;
8'h87:	xout=8'hea;
8'hE9:	xout=8'heb;
8'hCE:	xout=8'hec;
8'h55:	xout=8'hed;
8'h28:	xout=8'hee;
8'hDF:	xout=8'hef;
8'h8C:	xout=8'hf0;
8'hA1:	xout=8'hf1;
8'h89:	xout=8'hf2;
8'h0D:	xout=8'hf3;
8'hBF:	xout=8'hf4;
8'hE6:	xout=8'hf5;
8'h42:	xout=8'hf6;
8'h68:	xout=8'hf7;
8'h41:	xout=8'hf8;
8'h99:	xout=8'hf9;
8'h2D:	xout=8'hfa;
8'h0F:	xout=8'hfb;
8'hB0:	xout=8'hfc;
8'h54:	xout=8'hfd;
8'hBB:	xout=8'hfe;
8'h16:	xout=8'hff;
    endcase
  end    
endmodule
//s_box
module s_box(
  input [7:0]xin,
  output reg [7:0]sb);
  always @(*) begin
    case(xin)
      8'h00: sb=8'h63;
      8'h01: sb=8'h7c;
	   8'h02: sb=8'h77;
	   8'h03: sb=8'h7b;
	   8'h04: sb=8'hf2;
	   8'h05: sb=8'h6b;
	   8'h06: sb=8'h6f;
	   8'h07: sb=8'hc5;
	   8'h08: sb=8'h30;
	   8'h09: sb=8'h01;
	   8'h0a: sb=8'h67;
	   8'h0b: sb=8'h2b;
	   8'h0c: sb=8'hfe;
	   8'h0d: sb=8'hd7;
	   8'h0e: sb=8'hab;
	   8'h0f: sb=8'h76;
	   8'h10: sb=8'hca;
	   8'h11: sb=8'h82;
	   8'h12: sb=8'hc9;
	   8'h13: sb=8'h7d;
	   8'h14: sb=8'hfa;
	   8'h15: sb=8'h59;
	   8'h16: sb=8'h47;
	   8'h17: sb=8'hf0;
	   8'h18: sb=8'had;
	   8'h19: sb=8'hd4;
	   8'h1a: sb=8'ha2;
	   8'h1b: sb=8'haf;
	   8'h1c: sb=8'h9c;
	   8'h1d: sb=8'ha4;
	   8'h1e: sb=8'h72;
	   8'h1f: sb=8'hc0;
	   8'h20: sb=8'hb7;
	   8'h21: sb=8'hfd;
	   8'h22: sb=8'h93;
	   8'h23: sb=8'h26;
	   8'h24: sb=8'h36;
	   8'h25: sb=8'h3f;
	   8'h26: sb=8'hf7;
	   8'h27: sb=8'hcc;
	   8'h28: sb=8'h34;
	   8'h29: sb=8'ha5;
	   8'h2a: sb=8'he5;
	   8'h2b: sb=8'hf1;
	   8'h2c: sb=8'h71;
	   8'h2d: sb=8'hd8;
	   8'h2e: sb=8'h31;
	   8'h2f: sb=8'h15;
	   8'h30: sb=8'h04;
	   8'h31: sb=8'hc7;
	   8'h32: sb=8'h23;
	   8'h33: sb=8'hc3;
	   8'h34: sb=8'h18;
	   8'h35: sb=8'h96;
	   8'h36: sb=8'h05;
	   8'h37: sb=8'h9a;
	   8'h38: sb=8'h07;
	   8'h39: sb=8'h12;
	   8'h3a: sb=8'h80;
	   8'h3b: sb=8'he2;
	   8'h3c: sb=8'heb;
	   8'h3d: sb=8'h27;
	   8'h3e: sb=8'hb2;
	   8'h3f: sb=8'h75;
	   8'h40: sb=8'h09;
	   8'h41: sb=8'h83;
	   8'h42: sb=8'h2c;
	   8'h43: sb=8'h1a;
	   8'h44: sb=8'h1b;
	   8'h45: sb=8'h6e;
	   8'h46: sb=8'h5a;
	   8'h47: sb=8'ha0;
	   8'h48: sb=8'h52;
	   8'h49: sb=8'h3b;
	   8'h4a: sb=8'hd6;
	   8'h4b: sb=8'hb3;
	   8'h4c: sb=8'h29;
	   8'h4d: sb=8'he3;
	   8'h4e: sb=8'h2f;
	   8'h4f: sb=8'h84;
	   8'h50: sb=8'h53;
	   8'h51: sb=8'hd1;
	   8'h52: sb=8'h00;
	   8'h53: sb=8'hed;
	   8'h54: sb=8'h20;
	   8'h55: sb=8'hfc;
	   8'h56: sb=8'hb1;
	   8'h57: sb=8'h5b;
	   8'h58: sb=8'h6a;
	   8'h59: sb=8'hcb;
	   8'h5a: sb=8'hbe;
	   8'h5b: sb=8'h39;
	   8'h5c: sb=8'h4a;
	   8'h5d: sb=8'h4c;
	   8'h5e: sb=8'h58;
	   8'h5f: sb=8'hcf;
	   8'h60: sb=8'hd0;
	   8'h61: sb=8'hef;
	   8'h62: sb=8'haa;
	   8'h63: sb=8'hfb;
	   8'h64: sb=8'h43;
	   8'h65: sb=8'h4d;
	   8'h66: sb=8'h33;
	   8'h67: sb=8'h85;
	   8'h68: sb=8'h45;
	   8'h69: sb=8'hf9;
	   8'h6a: sb=8'h02;
	   8'h6b: sb=8'h7f;
	   8'h6c: sb=8'h50;
	   8'h6d: sb=8'h3c;
	   8'h6e: sb=8'h9f;
	   8'h6f: sb=8'ha8;
	   8'h70: sb=8'h51;
	   8'h71: sb=8'ha3;
	   8'h72: sb=8'h40;
	   8'h73: sb=8'h8f;
	   8'h74: sb=8'h92;
	   8'h75: sb=8'h9d;
	   8'h76: sb=8'h38;
	   8'h77: sb=8'hf5;
	   8'h78: sb=8'hbc;
	   8'h79: sb=8'hb6;
	   8'h7a: sb=8'hda;
	   8'h7b: sb=8'h21;
	   8'h7c: sb=8'h10;
	   8'h7d: sb=8'hff;
	   8'h7e: sb=8'hf3;
	   8'h7f: sb=8'hd2;
	   8'h80: sb=8'hcd;
	   8'h81: sb=8'h0c;
	   8'h82: sb=8'h13;
	   8'h83: sb=8'hec;
	   8'h84: sb=8'h5f;
	   8'h85: sb=8'h97;
	   8'h86: sb=8'h44;
	   8'h87: sb=8'h17;
	   8'h88: sb=8'hc4;
	   8'h89: sb=8'ha7;
	   8'h8a: sb=8'h7e;
	   8'h8b: sb=8'h3d;
	   8'h8c: sb=8'h64;
	   8'h8d: sb=8'h5d;
	   8'h8e: sb=8'h19;
	   8'h8f: sb=8'h73;
	   8'h90: sb=8'h60;
	   8'h91: sb=8'h81;
	   8'h92: sb=8'h4f;
	   8'h93: sb=8'hdc;
	   8'h94: sb=8'h22;
	   8'h95: sb=8'h2a;
	   8'h96: sb=8'h90;
	   8'h97: sb=8'h88;
	   8'h98: sb=8'h46;
	   8'h99: sb=8'hee;
	   8'h9a: sb=8'hb8;
	   8'h9b: sb=8'h14;
	   8'h9c: sb=8'hde;
	   8'h9d: sb=8'h5e;
	   8'h9e: sb=8'h0b;
	   8'h9f: sb=8'hdb;
	   8'ha0: sb=8'he0;
	   8'ha1: sb=8'h32;
	   8'ha2: sb=8'h3a;
	   8'ha3: sb=8'h0a;
	   8'ha4: sb=8'h49;
	   8'ha5: sb=8'h06;
	   8'ha6: sb=8'h24;
	   8'ha7: sb=8'h5c;
	   8'ha8: sb=8'hc2;
	   8'ha9: sb=8'hd3;
	   8'haa: sb=8'hac;
	   8'hab: sb=8'h62;
	   8'hac: sb=8'h91;
	   8'had: sb=8'h95;
	   8'hae: sb=8'he4;
	   8'haf: sb=8'h79;
	   8'hb0: sb=8'he7;
	   8'hb1: sb=8'hc8;
	   8'hb2: sb=8'h37;
	   8'hb3: sb=8'h6d;
	   8'hb4: sb=8'h8d;
	   8'hb5: sb=8'hd5;
	   8'hb6: sb=8'h4e;
	   8'hb7: sb=8'ha9;
	   8'hb8: sb=8'h6c;
	   8'hb9: sb=8'h56;
	   8'hba: sb=8'hf4;
	   8'hbb: sb=8'hea;
	   8'hbc: sb=8'h65;
	   8'hbd: sb=8'h7a;
	   8'hbe: sb=8'hae;
	   8'hbf: sb=8'h08;
	   8'hc0: sb=8'hba;
	   8'hc1: sb=8'h78;
	   8'hc2: sb=8'h25;
	   8'hc3: sb=8'h2e;
	   8'hc4: sb=8'h1c;
	   8'hc5: sb=8'ha6;
	   8'hc6: sb=8'hb4;
	   8'hc7: sb=8'hc6;
	   8'hc8: sb=8'he8;
	   8'hc9: sb=8'hdd;
	   8'hca: sb=8'h74;
	   8'hcb: sb=8'h1f;
	   8'hcc: sb=8'h4b;
	   8'hcd: sb=8'hbd;
	   8'hce: sb=8'h8b;
	   8'hcf: sb=8'h8a;
	   8'hd0: sb=8'h70;
	   8'hd1: sb=8'h3e;
	   8'hd2: sb=8'hb5;
	   8'hd3: sb=8'h66;
	   8'hd4: sb=8'h48;
	   8'hd5: sb=8'h03;
	   8'hd6: sb=8'hf6;
	   8'hd7: sb=8'h0e;
	   8'hd8: sb=8'h61;
	   8'hd9: sb=8'h35;
	   8'hda: sb=8'h57;
	   8'hdb: sb=8'hb9;
	   8'hdc: sb=8'h86;
	   8'hdd: sb=8'hc1;
	   8'hde: sb=8'h1d;
	   8'hdf: sb=8'h9e;
	   8'he0: sb=8'he1;
	   8'he1: sb=8'hf8;
	   8'he2: sb=8'h98;
	   8'he3: sb=8'h11;
	   8'he4: sb=8'h69;
	   8'he5: sb=8'hd9;
	   8'he6: sb=8'h8e;
	   8'he7: sb=8'h94;
	   8'he8: sb=8'h9b;
	   8'he9: sb=8'h1e;
	   8'hea: sb=8'h87;
	   8'heb: sb=8'he9;
	   8'hec: sb=8'hce;
	   8'hed: sb=8'h55;
	   8'hee: sb=8'h28;
	   8'hef: sb=8'hdf;
	   8'hf0: sb=8'h8c;
	   8'hf1: sb=8'ha1;
	   8'hf2: sb=8'h89;
	   8'hf3: sb=8'h0d;
	   8'hf4: sb=8'hbf;
	   8'hf5: sb=8'he6;
	   8'hf6: sb=8'h42;
	   8'hf7: sb=8'h68;
	   8'hf8: sb=8'h41;
	   8'hf9: sb=8'h99;
	   8'hfa: sb=8'h2d;
	   8'hfb: sb=8'h0f;
	   8'hfc: sb=8'hb0;
	   8'hfd: sb=8'h54;
	   8'hfe: sb=8'hbb;
	   8'hff: sb=8'h16;
    endcase
  end    
endmodule
//testbench

module test;
  reg [127:0]cypher_text,key;
  wire [127:0]plain_text;
  AES_decryption decryption1(cypher_text,key,plain_text);
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,decryption1);
     cypher_text={8'h69,8'hC4 ,8'hE0 ,8'hD8
                   ,8'h6A ,8'h7B ,8'h04 ,8'h30 ,8'hD8
                    ,8'hCD ,8'hB7 ,8'h80 ,8'h70 
                    ,8'hB4 ,8'hC5 ,8'h5A};
    key={8'h00,8'h1,8'h2,8'h3,
         8'h4,8'h5,8'h6,8'h7,
         8'h8,8'h9,8'ha,8'hb,
         8'hc,8'hd,8'he,8'hf};
    $monitor("%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h\n%8h%8h%8h%8h\n",
             plain_text[127:120],
             plain_text[95:88],
             plain_text[63:56],
             plain_text[31:24],
             plain_text[119:112],
             plain_text[87:80],
             plain_text[55:48],
             plain_text[23:16],
             plain_text[111:104],
             plain_text[79:72],
             plain_text[47:40],
             plain_text[15:8],
             plain_text[103:96],
             plain_text[71:64],
             plain_text[39:32],
             plain_text[7:0]);   
  end
endmodule
/*
cypher_text:-69 C4 E0 D8 6A 7B 04 30 D8 CD B7 80 70 B4 C5 5A
key:-1 2 3 4 5 6 7 8 9 a b c d e f
plain_text:-00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
*/